{
  "name": "AGNT_21_ResearchAgent_Local",
  "nodes": [
    {
      "parameters": {
        "content": "## üîç Research Agent Local\n\n**Agente de investigaci√≥n competitiva que funciona completamente local.**\n\n### Caracter√≠sticas principales:\n- **Modelo:** Ollama DeepSeek Coder (local)\n- **Investigaci√≥n:** Perplexity API (externa)\n- **Output:** Archivos markdown locales\n- **Datos:** Completamente privados\n\n### Flujo del proceso:\n1. Recibe consulta de investigaci√≥n\n2. Investiga con Perplexity\n3. Genera reporte markdown\n4. Guarda archivo local\n5. Retorna ruta del archivo",
        "height": 400,
        "width": 350,
        "color": 4
      },
      "id": "nota-main-workflow",
      "name": "Nota Principal del Workflow",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [50, 50]
    },
    {
      "parameters": {
        "content": "## ‚öôÔ∏è CONFIGURACI√ìN REQUERIDA\n\n### 1. Ollama Setup:\n```bash\nollama pull deepseek-coder:1.3b\nollama serve\n```\n\n### 2. Perplexity API:\n- Configurar credenciales\n- Model: sonar-pro\n\n### 3. Directorio Docker:\n**Autom√°tico en volumen n8n_data:**\n`/home/node/.n8n/research-reports/`\n\n**Subdirectorios creados autom√°ticamente:**\n- `/completed/` - Reportes finalizados\n- `/temp/` - Archivos temporales\n- `/samples/` - Datos de prueba\n\n### 4. Permisos:\n- Usuario node (UID 1000) autom√°tico\n- Escritura en volumen existente",
        "height": 380,
        "width": 340,
        "color": 2
      },
      "id": "nota-configuration",
      "name": "Nota de Configuraci√≥n",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [450, 50]
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "query",
              "type": "string",
              "description": "Consulta de investigaci√≥n competitiva"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [200, 300],
      "id": "trigger-workflow-execution",
      "name": "Ejecutar desde Manager"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [200, 450],
      "id": "trigger-manual-test",
      "name": "Test Manual"
    },
    {
      "parameters": {
        "baseURL": "http://host.docker.internal:11434",
        "model": "deepseek-coder:1.3b",
        "options": {
          "temperature": 0.3,
          "maxTokens": 4000
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [420, 200],
      "id": "ollama-chat-model",
      "name": "Ollama DeepSeek Coder"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.query || 'Realizar investigaci√≥n competitiva' }}",
        "options": {
          "systemMessage": "# RESEARCH AGENT LOCAL - SISTEMA DE INVESTIGACI√ìN COMPETITIVA v2.0\n\n## üéØ FUNCI√ìN PRINCIPAL\n\n**Responsabilidad:**  \nRealizar an√°lisis competitivo exhaustivo con referencias acad√©micas sobre empresas espec√≠ficas mediante investigaci√≥n de ofertas de productos, estrategias de mercado y posicionamiento empresarial. Cada reporte DEBE incluir M√çNIMO 5 FUENTES VERIFICADAS con citas acad√©micas apropiadas.\n\n**ENTREGABLES OBLIGATORIOS:**  \n- Reportes de investigaci√≥n competitiva con bibliograf√≠a detallada\n- Insights estrat√©gicos respaldados por fuentes verificadas\n- Recomendaciones accionables con citas de respaldo\n- Archivo markdown local con secci√≥n \"Referencias\" completa\n- Citas en formato APA a lo largo del documento\n\n**Est√°ndares de Calidad:**\n- M√çNIMO 5 fuentes verificadas por reporte\n- Fuentes m√°ximo 2 a√±os de antig√ºedad (salvo contexto hist√≥rico)\n- Mix de tipos de fuentes: papers acad√©micos, reportes institucionales, fuentes verificadas\n- Todos los enlaces validados para accesibilidad\n- Informaci√≥n cruzada para precisi√≥n\n\n---\n\n## üìö SISTEMA DE REFERENCIAS OBLIGATORIO\n\n### IDENTIFICACI√ìN Y RECOLECCI√ìN DE FUENTES\n\n**üü¢ FUENTES TIER 1 (Objetivo: 40% de referencias)**\n- Journals acad√©micos e investigaci√≥n universitaria\n- Reportes gubernamentales y estad√≠sticas oficiales\n- Reportes anuales y filings SEC\n- Publicaciones de bancos centrales y regulatorias\n- Reportes de organizaciones internacionales (UN, World Bank, etc.)\n\n**üü° FUENTES TIER 2 (Objetivo: 40% de referencias)**\n- Reportes de asociaciones industriales\n- Estudios de firmas consultoras profesionales (McKinsey, Deloitte, etc.)\n- Medios financieros establecidos (Bloomberg, Reuters, Financial Times)\n- An√°lisis de publicaciones especializadas\n- Reportes de investigaci√≥n de mercado verificados\n\n**üî¥ FUENTES TIER 3 (M√°ximo: 20% de referencias)**\n- Press releases corporativos\n- Art√≠culos de noticias recientes verificados\n- Posts de blogs industriales de expertos reconocidos\n- Redes sociales de cuentas corporativas oficiales\n\n### FORMATO DE CITAS REQUERIDO\n\n**CITAS EN TEXTO:**\nSeg√∫n el reporte financiero Q3 2024 de Tesla, los ingresos aumentaron 15% a√±o a a√±o (Tesla Inc., 2024). Este crecimiento se alinea con tendencias industriales identificadas por el an√°lisis automotriz de McKinsey (McKinsey & Company, 2024).\n\n**SECCI√ìN DE REFERENCIAS (Formato APA):**\nREFERENCIAS\nTesla Inc. (2024). Quarterly Report Form 10-Q for Q3 2024. Securities and Exchange Commission. https://www.sec.gov/Archives/edgar/data/1318605/000095017024001234/tsla-20240930.htm\nMcKinsey & Company. (2024). The future of automotive: How competitive dynamics are reshaping the industry. McKinsey Global Institute. https://www.mckinsey.com/industries/automotive-and-assembly/our-insights/the-future-of-automotive\n\n---\n\n## üìä HERRAMIENTAS DISPONIBLES\n\n**Perplexity Research (Externa):**  \n- Usar para: Inteligencia competitiva en tiempo real y datos de mercado\n- Cu√°ndo usar: Herramienta primaria para toda recolecci√≥n de informaci√≥n externa\n- Limitaciones: L√≠mites de rate API; verificar actualidad de informaci√≥n\n\n**Sistema de Archivos Local (Lectura/Escritura):**  \n- Usar para: Crear, leer y actualizar reportes de investigaci√≥n localmente\n- Cu√°ndo usar: Paso final para documentar hallazgos + leer contexto existente\n- Formato de archivo: Markdown estructurado con templates consistentes\n- Ubicaci√≥n: /home/node/.n8n/research-reports/ con naming estandarizado\n\n---\n\n## üîç METODOLOG√çA DE INVESTIGACI√ìN MEJORADA\n\n### REQUERIMIENTOS DE PROFUNDIDAD\n\n**1. OVERVIEW DE EMPRESA (con fuentes)**\nINVESTIGAR Y DOCUMENTAR:\n- Fecha de fundaci√≥n e historia [Fuente acad√©mica requerida]\n- Capitalizaci√≥n de mercado/tama√±o actual [Base de datos financiera requerida]\n- Equipo directivo y cambios recientes [Filings de empresa + noticias verificadas]\n- Presencia geogr√°fica y operaciones [Reportes anuales requeridos]\n- Modelo de negocio principal y flujos de ingresos [Filings SEC preferidos]\n\n**2. POSICIONAMIENTO COMPETITIVO (basado en evidencia)**\nINVESTIGAR Y DOCUMENTAR:\n- Datos de participaci√≥n de mercado con an√°lisis comparativo [Reportes industriales requeridos]\n- Estrategias de precios vs competidores [Estudios de investigaci√≥n de mercado]\n- Factores de diferenciaci√≥n de productos [Publicaciones t√©cnicas + reviews]\n- Ratings de satisfacci√≥n del cliente [Organizaciones de investigaci√≥n del consumidor]\n- Estudios de percepci√≥n de marca [Firmas de investigaci√≥n de marketing]\n\n**3. PERFORMANCE FINANCIERO (impulsado por datos)**\nINVESTIGAR Y DOCUMENTAR:\n- Tendencias de crecimiento de ingresos (an√°lisis 5 a√±os) [Reportes anuales obligatorios]\n- M√©tricas de rentabilidad vs promedios industriales [Bases de datos financieras]\n- Inversi√≥n en I+D como porcentaje de ingresos [Filings SEC]\n- Patrones de gastos de capital [Reportes trimestrales]\n- Ratios deuda-equity y salud financiera [Agencias de calificaci√≥n crediticia]\n\n---\n\n## üìÑ ESTRUCTURA DE ARCHIVO MARKDOWN\n\n### SECCIONES OBLIGATORIAS\n\n**1. RESUMEN EJECUTIVO (150 palabras m√°x)**\nOverview breve con 2-3 hallazgos clave, cada uno con citas inline.\n\n**2. METODOLOG√çA Y OVERVIEW DE FUENTES**\nMETODOLOG√çA DE INVESTIGACI√ìN\nEste an√°lisis competitivo se basa en:\n- X fuentes acad√©micas y de investigaci√≥n\n- X reportes financieros oficiales (SEC, reportes anuales)\n- X estudios de mercado de firmas reconocidas\n- X publicaciones especializadas verificadas\n\n**3. AN√ÅLISIS COMPETITIVO DETALLADO (400-500 palabras)**\nCada hallazgo mayor DEBE incluir:\n- Cita inline\n- Puntos de datos espec√≠ficos\n- Contexto comparativo\n- Indicador de credibilidad de fuente\n\n**4. IMPLICACIONES ESTRAT√âGICAS (100-150 palabras)**\nRecomendaciones basadas en evidencia con citas de apoyo.\n\n**5. SECCI√ìN DE REFERENCIAS COMPLETA**\nREFERENCIAS COMPLETAS\nFuentes Primarias (Tier 1)\n[Empresa] Inc. (2024). Annual Report 2024. Securities and Exchange Commission. [URL]\n\nFuentes Secundarias Verificadas (Tier 2)\nMcKinsey & Company. (2024). Industry Analysis: [Sector] Competitive Landscape. [URL]\n\nFuentes de Apoyo (Tier 3)\nReuters. (2024). [Empresa] reports Q3 earnings beat expectations. [URL]\n\n---\n\n## üìã ESPECIFICACIONES DE OUTPUT\n\n**M√©todo de Entrega:**  \n- **REQUERIDO**: Proporcionar ruta de archivo local directa al usuario en respuesta final\n- Incluir resumen breve de hallazgos clave junto con la ubicaci√≥n del archivo\n- Archivo guardado con naming estructurado: research_[empresa]_[fecha].md\n- Ubicaci√≥n est√°ndar: /home/node/.n8n/research-reports/completed/\n\n**Convenciones de Naming:**\n- Investigaci√≥n b√°sica: research_[empresa]_[YYYY-MM-DD].md\n- Competitiva: research_[empresa]_vs_[competidor]_[YYYY-MM-DD].md\n- An√°lisis de mercado: research_market_[sector]_[YYYY-MM-DD].md\n\n**Template de Respuesta Final:**\n‚úÖ **Investigaci√≥n completada exitosamente**\n\nüìÅ **Archivo guardado en:** `/home/node/.n8n/research-reports/completed/research_[empresa]_[fecha].md`\n\nüìä **Resumen de hallazgos:**\n- [Hallazgo clave 1]\n- [Hallazgo clave 2]\n- [Hallazgo clave 3]\n\nüìö **Fuentes utilizadas:** [X] fuentes verificadas\n‚è±Ô∏è **Tiempo de an√°lisis:** [X] minutos\n\n---\n\n## ‚ö° WORKFLOW CON VALIDACI√ìN DE REFERENCIAS\n\n### PASO 1: RECOLECCI√ìN COMPRENSIVA DE FUENTES (15 min)\nEJECUTAR QUERIES:\n‚úÖ Query 1-3: Investigaci√≥n amplia de empresa\n‚úÖ Query 4-6: Investigaci√≥n especializada profunda\n‚úÖ Query 7-9: Verificaci√≥n y cross-referencing\n\n### PASO 2: SELECCI√ìN Y VALIDACI√ìN DE REFERENCIAS (10 min)\nSELECCIONAR FUENTES FINALES:\n‚úÖ Elegir mejores 5-7 fuentes asegurando mix:\n- 2-3 fuentes Tier 1 (acad√©micas/oficiales)\n- 2-3 fuentes Tier 2 (profesionales/industriales)\n- 1-2 fuentes Tier 3 (noticias/corporativas)\n\n### PASO 3: ESCRITURA DE AN√ÅLISIS CON CITAS (20 min)\nREQUERIMIENTOS DE ESCRITURA:\n‚úÖ Cada claim mayor tiene cita inline\n‚úÖ Formato APA aplicado consistentemente\n‚úÖ Integraci√≥n de fuentes se siente natural\n‚úÖ Balance de parafraseo y citas directas\n‚úÖ Cross-referencias entre fuentes cuando aplica\n\n### PASO 4: VALIDACI√ìN FINAL Y CREACI√ìN DE ARCHIVO (10 min)\nCHECKLIST DE CALIDAD:\n‚úÖ Todos los URLs probados y funcionales\n‚úÖ Secci√≥n de referencias completa y formateada\n‚úÖ M√≠nimo 5 fuentes verificadas incluidas\n‚úÖ No hay claims sin soporte en an√°lisis\n‚úÖ Formato profesional aplicado\n\n**Recordar:** Cada an√°lisis debe demostrar est√°ndares de investigaci√≥n de nivel acad√©mico con fuentes verificables y atribuci√≥n apropiada. Ning√∫n claim debe estar sin soporte de evidencia cre√≠ble."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [640, 300],
      "id": "research-agent-local",
      "name": "Research Agent Local"
    },
    {
      "parameters": {
        "model": "sonar-pro",
        "messages": {
          "message": [
            {
              "content": "={{ $json.query || 'Research competitive analysis' }}"
            }
          ]
        },
        "options": {
          "temperature": 0.2,
          "maxTokens": 4000
        }
      },
      "type": "n8n-nodes-base.perplexityTool",
      "typeVersion": 1,
      "position": [480, 500],
      "id": "perplexity-research",
      "name": "Perplexity Research",
      "credentials": {
        "perplexityApi": {
          "id": "perplexity_credentials",
          "name": "Perplexity API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Filesystem Read Tool - Lee archivos de investigaci√≥n existentes\nconst fs = require('fs');\nconst path = require('path');\n\n// Obtener par√°metros del agent\nconst filePath = $fromAI('file_path', '/home/node/.n8n/research-reports/', 'string');\n\ntry {\n  // Verificar si el archivo existe\n  if (!fs.existsSync(filePath)) {\n    return {\n      error: true,\n      message: `Archivo no encontrado: ${filePath}`,\n      suggestion: 'Verificar ruta o crear nuevo reporte'\n    };\n  }\n  \n  // Leer contenido del archivo\n  const content = fs.readFileSync(filePath, 'utf8');\n  \n  // Obtener metadata del archivo\n  const stats = fs.statSync(filePath);\n  \n  return {\n    success: true,\n    content: content,\n    metadata: {\n      size: stats.size,\n      modified: stats.mtime,\n      created: stats.birthtime,\n      path: filePath\n    },\n    message: `Archivo le√≠do exitosamente: ${path.basename(filePath)}`\n  };\n  \n} catch (error) {\n  return {\n    error: true,\n    message: `Error al leer archivo: ${error.message}`,\n    errorCode: error.code\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 180],
      "id": "filesystem-read-tool",
      "name": "Filesystem Read Tool"
    },
    {
      "parameters": {
        "jsCode": "// Filesystem Write Tool - Crea reportes de investigaci√≥n en markdown\nconst fs = require('fs');\nconst path = require('path');\n\n// Obtener par√°metros del agent\nconst filename = $fromAI('filename', '', 'string');\nconst content = $fromAI('content', '', 'string');\nconst overwrite = $fromAI('overwrite', false, 'boolean');\n\n// Directorio base para reportes (dentro del volumen n8n_data)\nconst baseDir = '/home/node/.n8n/research-reports/completed';\nconst tempDir = '/home/node/.n8n/research-reports/temp';\n\ntry {\n  // Crear directorios si no existen\n  if (!fs.existsSync('/home/node/.n8n/research-reports')) {\n    fs.mkdirSync('/home/node/.n8n/research-reports', { recursive: true });\n  }\n  if (!fs.existsSync(baseDir)) {\n    fs.mkdirSync(baseDir, { recursive: true });\n  }\n  if (!fs.existsSync(tempDir)) {\n    fs.mkdirSync(tempDir, { recursive: true });\n  }\n  \n  // Generar nombre de archivo si no se proporciona\n  let finalFilename = filename;\n  if (!finalFilename) {\n    const timestamp = new Date().toISOString().split('T')[0];\n    finalFilename = `research_report_${timestamp}.md`;\n  }\n  \n  // Asegurar extensi√≥n .md\n  if (!finalFilename.endsWith('.md')) {\n    finalFilename += '.md';\n  }\n  \n  const fullPath = path.join(baseDir, finalFilename);\n  \n  // Verificar si el archivo existe y manejo de conflictos\n  if (fs.existsSync(fullPath) && !overwrite) {\n    // Crear versi√≥n numerada\n    const baseName = path.basename(finalFilename, '.md');\n    let counter = 1;\n    let newPath;\n    \n    do {\n      const versionedName = `${baseName}_v${counter}.md`;\n      newPath = path.join(baseDir, versionedName);\n      counter++;\n    } while (fs.existsSync(newPath));\n    \n    finalFilename = path.basename(newPath);\n    fullPath = newPath;\n  }\n  \n  // Agregar header est√°ndar si no existe\n  let finalContent = content;\n  if (!content.includes('# Research Report:')) {\n    const timestamp = new Date().toISOString();\n    const header = `# Research Report\\n**Fecha:** ${timestamp.split('T')[0]}\\n**Investigador:** Research Agent Local\\n**Ubicaci√≥n:** ${fullPath}\\n\\n`;\n    finalContent = header + content;\n  }\n  \n  // Escribir archivo\n  fs.writeFileSync(fullPath, finalContent, 'utf8');\n  \n  // Obtener stats del archivo creado\n  const stats = fs.statSync(fullPath);\n  \n  return {\n    success: true,\n    filePath: fullPath,\n    filename: finalFilename,\n    size: stats.size,\n    created: stats.birthtime,\n    message: `Reporte creado exitosamente: ${finalFilename}`,\n    directory: baseDir,\n    accessPath: `docker exec n8n-local cat ${fullPath}`\n  };\n  \n} catch (error) {\n  // Fallback a directorio temporal dentro del volumen\n  const fallbackDir = '/home/node/.n8n/research-reports/temp';\n  \n  try {\n    if (!fs.existsSync(fallbackDir)) {\n      fs.mkdirSync(fallbackDir, { recursive: true });\n    }\n    \n    const tempPath = path.join(fallbackDir, finalFilename || 'research_report_temp.md');\n    fs.writeFileSync(tempPath, content, 'utf8');\n    \n    return {\n      success: true,\n      filePath: tempPath,\n      filename: path.basename(tempPath),\n      message: `Reporte creado en directorio temporal: ${tempPath}`,\n      warning: `Error en directorio principal: ${error.message}`,\n      directory: fallbackDir\n    };\n    \n  } catch (tempError) {\n    return {\n      error: true,\n      message: `Error al crear archivo: ${error.message}`,\n      tempError: tempError.message,\n      suggestion: 'Verificar permisos de filesystem y configuraci√≥n de directorios'\n    };\n  }\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 340],
      "id": "filesystem-write-tool",
      "name": "Filesystem Write Tool"
    },
    {
      "parameters": {
        "jsCode": "// Filesystem List Tool - Lista archivos de investigaci√≥n disponibles\nconst fs = require('fs');\nconst path = require('path');\n\n// Obtener par√°metros del agent\nconst directory = $fromAI('directory', '/home/node/.n8n/research-reports/', 'string');\nconst filter = $fromAI('filter', '', 'string');\n\ntry {\n  // Verificar si el directorio existe\n  if (!fs.existsSync(directory)) {\n    return {\n      success: true,\n      files: [],\n      message: `Directorio no existe: ${directory}`,\n      suggestion: 'Crear primer reporte para inicializar directorio'\n    };\n  }\n  \n  // Leer archivos del directorio de manera recursiva\n  const getAllFiles = (dir, fileList = []) => {\n    const files = fs.readdirSync(dir);\n    \n    files.forEach(file => {\n      const filePath = path.join(dir, file);\n      const stat = fs.statSync(filePath);\n      \n      if (stat.isDirectory()) {\n        getAllFiles(filePath, fileList);\n      } else if (file.endsWith('.md')) {\n        fileList.push(filePath);\n      }\n    });\n    \n    return fileList;\n  };\n  \n  const allMarkdownFiles = getAllFiles(directory);\n  \n  // Aplicar filtro si se proporciona\n  let filteredFiles = allMarkdownFiles;\n  if (filter) {\n    const filterLower = filter.toLowerCase();\n    filteredFiles = allMarkdownFiles.filter(file => \n      path.basename(file).toLowerCase().includes(filterLower)\n    );\n  }\n  \n  // Obtener metadata de cada archivo\n  const fileDetails = filteredFiles.map(filePath => {\n    const stats = fs.statSync(filePath);\n    const relativePath = path.relative('/home/node/.n8n/research-reports/', filePath);\n    \n    return {\n      filename: path.basename(filePath),\n      relativePath: relativePath,\n      fullPath: filePath,\n      size: stats.size,\n      sizeFormatted: `${(stats.size / 1024).toFixed(2)} KB`,\n      modified: stats.mtime,\n      created: stats.birthtime,\n      modifiedFormatted: stats.mtime.toISOString().split('T')[0],\n      subdirectory: path.dirname(relativePath)\n    };\n  });\n  \n  // Ordenar por fecha de modificaci√≥n (m√°s reciente primero)\n  fileDetails.sort((a, b) => new Date(b.modified) - new Date(a.modified));\n  \n  return {\n    success: true,\n    directory: directory,\n    totalFiles: allMarkdownFiles.length,\n    filteredFiles: filteredFiles.length,\n    filter: filter || 'ninguno',\n    files: fileDetails,\n    message: `Encontrados ${filteredFiles.length} archivos de investigaci√≥n`,\n    structure: {\n      completed: fileDetails.filter(f => f.subdirectory.includes('completed')).length,\n      temp: fileDetails.filter(f => f.subdirectory.includes('temp')).length,\n      root: fileDetails.filter(f => f.subdirectory === '.').length\n    }\n  };\n  \n} catch (error) {\n  return {\n    error: true,\n    message: `Error al listar archivos: ${error.message}`,\n    directory: directory,\n    errorCode: error.code\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 500],
      "id": "filesystem-list-tool",
      "name": "Filesystem List Tool"
    },
    {
      "parameters": {
        "jsCode": "// Filesystem Append Tool - Actualiza reportes existentes\nconst fs = require('fs');\nconst path = require('path');\n\n// Obtener par√°metros del agent\nconst filePath = $fromAI('file_path', '', 'string');\nconst content = $fromAI('content', '', 'string');\nconst section = $fromAI('section', '', 'string');\n\ntry {\n  // Verificar si el archivo existe\n  if (!fs.existsSync(filePath)) {\n    return {\n      error: true,\n      message: `Archivo no encontrado: ${filePath}`,\n      suggestion: 'Crear nuevo reporte con Filesystem Write Tool'\n    };\n  }\n  \n  // Leer contenido actual\n  const currentContent = fs.readFileSync(filePath, 'utf8');\n  \n  // Preparar contenido a a√±adir\n  const timestamp = new Date().toISOString();\n  let newContent;\n  \n  if (section) {\n    // A√±adir a secci√≥n espec√≠fica\n    newContent = `\\n\\n## UPDATE - ${section}\\n**Actualizado:** ${timestamp.split('T')[0]}\\n\\n${content}\\n`;\n  } else {\n    // A√±adir al final\n    newContent = `\\n\\n---\\n**Actualizaci√≥n:** ${timestamp.split('T')[0]}\\n\\n${content}\\n`;\n  }\n  \n  // Combinar contenido\n  const updatedContent = currentContent + newContent;\n  \n  // Crear backup del archivo original\n  const backupDir = '/home/node/.n8n/research-reports/backups';\n  if (!fs.existsSync(backupDir)) {\n    fs.mkdirSync(backupDir, { recursive: true });\n  }\n  \n  const backupPath = path.join(backupDir, `${path.basename(filePath)}.backup.${Date.now()}`);\n  fs.copyFileSync(filePath, backupPath);\n  \n  // Escribir contenido actualizado\n  fs.writeFileSync(filePath, updatedContent, 'utf8');\n  \n  // Obtener stats del archivo actualizado\n  const stats = fs.statSync(filePath);\n  \n  return {\n    success: true,\n    filePath: filePath,\n    backupPath: backupPath,\n    newSize: stats.size,\n    modified: stats.mtime,\n    section: section || 'final del documento',\n    message: `Archivo actualizado exitosamente: ${path.basename(filePath)}`,\n    addedContent: content.length + ' caracteres a√±adidos'\n  };\n  \n} catch (error) {\n  return {\n    error: true,\n    message: `Error al actualizar archivo: ${error.message}`,\n    filePath: filePath,\n    errorCode: error.code\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [860, 660],
      "id": "filesystem-append-tool",
      "name": "Filesystem Append Tool"
    },
    {
      "parameters": {
        "content": "## üîÑ FLUJO DE PROCESAMIENTO\n\n### Entrada de Consulta:\n- Desde Manager Workflow\n- Test manual directo\n\n### Procesamiento:\n1. **Ollama DeepSeek** analiza consulta\n2. **Perplexity** realiza investigaci√≥n externa\n3. **Research Agent** procesa y estructura\n4. **Filesystem Tools** manejan archivos\n\n### Salida:\n- Ruta de archivo local\n- Resumen de hallazgos\n- Metadata de proceso\n\n### Ubicaci√≥n final:\n`/home/node/.n8n/research-reports/completed/`",
        "height": 320,
        "width": 300,
        "color": 7
      },
      "id": "nota-processing-flow",
      "name": "Nota Flujo de Proceso",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [1100, 50]
    },
    {
      "parameters": {
        "content": "## üõ†Ô∏è FILESYSTEM TOOLS\n\n### Read Tool:\n- Lee reportes existentes\n- Proporciona contexto\n- Metadata de archivos\n\n### Write Tool:\n- Crea nuevos reportes\n- Naming autom√°tico\n- Manejo de conflictos\n- Directorios: `/completed/`, `/temp/`\n\n### List Tool:\n- Lista archivos disponibles\n- Filtros por empresa/fecha\n- Metadata completa\n- B√∫squeda recursiva\n\n### Append Tool:\n- Actualiza reportes\n- Backups autom√°ticos en `/backups/`\n- Control de versiones",
        "height": 360,
        "width": 280,
        "color": 4
      },
      "id": "nota-filesystem-tools",
      "name": "Nota Filesystem Tools",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [1200, 350]
    },
    {
      "parameters": {
        "content": "## ‚ö†Ô∏è TROUBLESHOOTING\n\n### Errores Comunes:\n\n**Ollama no disponible:**\n- Verificar: `ollama serve`\n- Modelo: `ollama pull deepseek-coder:1.3b`\n- Network: `http://host.docker.internal:11434`\n\n**Permisos filesystem:**\n- Autom√°tico en volumen n8n_data\n- Usuario node (UID 1000)\n\n**Perplexity API:**\n- Verificar credenciales en n8n\n- L√≠mites de rate\n- Conectividad internet\n\n**Verificar archivos creados:**\n```bash\ndocker exec n8n-local ls -la /home/node/.n8n/research-reports/\ndocker exec n8n-local cat /home/node/.n8n/research-reports/completed/research_*.md\n```",
        "height": 380,
        "width": 340,
        "color": 5
      },
      "id": "nota-troubleshooting",
      "name": "Nota Troubleshooting",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [1520, 200]
    }
  ],
  "pinData": {},
  "connections": {
    "Ollama DeepSeek Coder": {
      "ai_languageModel": [
        [
          {
            "node": "Research Agent Local",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Ejecutar desde Manager": {
      "main": [
        [
          {
            "node": "Research Agent Local",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test Manual": {
      "main": [
        [
          {
            "node": "Research Agent Local",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Perplexity Research": {
      "ai_tool": [
        [
          {
            "node": "Research Agent Local",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Filesystem Read Tool": {
      "ai_tool": [
        [
          {
            "node": "Research Agent Local",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Filesystem Write Tool": {
      "ai_tool": [
        [
          {
            "node": "Research Agent Local",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Filesystem List Tool": {
      "ai_tool": [
        [
          {
            "node": "Research Agent Local",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Filesystem Append Tool": {
      "ai_tool": [
        [
          {
            "node": "Research Agent Local",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "research-agent-local-v1.0",
  "meta": {
    "templateCredsSetupCompleted": false,
    "instanceId": "12345678-abcd-1234-5678-123456789abc"
  },
  "id": "ResearchAgentLocal2024"
}